apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis.fullname" . }}-config
  labels:
    {{- include "redis.labels" . | nindent 4 }}
data:
  redis.conf: |
    {{- if .Values.redis.customConfig }}
    {{- .Values.redis.customConfig | nindent 4 }}
    {{- else }}
    dir "/data/store/db"
    port {{ .Values.redis.port }}
    {{- range $key, $value := .Values.redis.config }}
    {{ $key }} {{ $value }}
    {{- end }}
    {{- if .Values.auth.enabled }}
    requirepass replace-default-auth
    masterauth replace-default-auth
    {{- end }}
    {{- end }}

  sentinel.conf: |
    {{- if .Values.sentinel.customConfig }}
    {{- .Values.sentinel.customConfig | nindent 4 }}
    {{- else }}
    dir "/data/store/db"
    port {{ .Values.sentinel.port }}
    {{- $root := . -}}
    {{- range $key, $value := .Values.sentinel.config }}
    sentinel {{ $key }} {{ $root.Values.masterGroupName }} {{ $value }}
    {{- end }}
    {{- if .Values.auth.enabled }}
    sentinel auth-pass {{ .Values.masterGroupName }} replace-default-auth
    {{- end }}
    {{- end }}

  init.sh: |
    #!/bin/sh
    set -x

    INDEX="${POD_NAME##*-}"
    POD_PREFIX="${POD_NAME%-*}"
    SERVICE={{ include "redis.fullname" . }}
    REDIS_CONF=/data/store/conf/redis.conf
    REDIS_PORT={{ .Values.redis.port }}
    SENTINEL_CONF=/data/store/conf/sentinel.conf
    SENTINEL_PORT={{ .Values.sentinel.port }}
    MASTER_GROUP={{ .Values.masterGroupName }}
    QUORUM={{ .Values.sentinel.quorum }}

    {{- if .Values.hostNetwork }}
    ANNOUNCE_IP=$POD_IP
    {{- else }}
    ANNOUNCE_IP=$(getent hosts "$SERVICE-announce-$INDEX" | awk '{ print $1 }')
    {{- end }}
    if [ -z "$ANNOUNCE_IP" ]; then
        "Could not resolve the announce ip for this pod"
        exit 1
    fi

    {{- if .Values.hostNetwork }}
    DEFAULT_MASTER="$(getent hosts "$POD_PREFIX-0.$SERVICE" | awk '{ print $1 }')"
    {{- else }}
    DEFAULT_MASTER="$(getent hosts "$SERVICE-announce-0" | awk '{ print $1 }')"
    {{- end }}
    if [ -z "$DEFAULT_MASTER" ]; then
        echo "Unable to resolve default master"
        exit 1
    fi

    copy_config() {
        cp -f /readonly-config/redis.conf "$REDIS_CONF"
        cp -f /readonly-config/sentinel.conf "$SENTINEL_CONF"
    }

    redis_init() {
        echo "Initializing redis config"
        echo "slave-announce-ip $ANNOUNCE_IP" >> $REDIS_CONF
        echo "slave-announce-port $REDIS_PORT" >> $REDIS_CONF
    }

    redis_update() {
        echo "Updating redis config"
        echo "slaveof $1 $REDIS_PORT" >> "$REDIS_CONF"
    }

    sentinel_init() {
        echo "Initializing sentinel config"
        local sentinelid="$(echo $SENTINEL_ID_SRC-$INDEX | sha1sum | cut -c1-40)"
        sed -i "1s/^/sentinel myid $sentinelid\\n/" "$SENTINEL_CONF"
        echo "sentinel announce-ip $ANNOUNCE_IP" >> $SENTINEL_CONF
        echo "sentinel announce-port $SENTINEL_PORT" >> $SENTINEL_CONF
    }

    sentinel_update() {
        echo "Updating sentinel config"
        sed -i "2s/^/sentinel monitor $MASTER_GROUP $1 $REDIS_PORT $QUORUM \\n/" "$SENTINEL_CONF"
    }

    {{- if .Values.manualMode }}

    if [ -f /data/store/conf/done ]; then
        echo "Skipping by manual mode"
        exit 0
    fi
    {{- end }}

    echo "Initializing..."

    mkdir -p /data/store/conf
    mkdir -p /data/store/db

    copy_config
    redis_init
    sentinel_init

    {{- if not .Values.manualMode }}

    MASTER="$(redis-cli -h $SERVICE -p {{ .Values.sentinel.port }} sentinel get-master-addr-by-name {{ .Values.masterGroupName }} | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"

    setup_defaults() {
        echo "Setting up defaults"
        if [ "$INDEX" = "0" ]; then
            echo "Setting this pod as the default master"
            redis_update "$ANNOUNCE_IP"
            sentinel_update "$ANNOUNCE_IP"
            sed -i "s/^.*slaveof.*//" "$REDIS_CONF"
        else
            echo "Setting default slave config.."
            redis_update "$DEFAULT_MASTER"
            sentinel_update "$DEFAULT_MASTER"
        fi
    }

    find_master() {
        echo "Attempting to find master"
        if [ "$(redis-cli -h "$MASTER"{{ if .Values.auth.enabled }} -a "$AUTH"{{ end }} ping)" != "PONG" ]; then
           echo "Can't ping master, attempting to force failover"
           if redis-cli -h "$SERVICE" -p "$SENTINEL_PORT" sentinel failover "$MASTER_GROUP" | grep -q 'NOGOODSLAVE' ; then
               setup_defaults
               return 0
           fi
           sleep 10
           MASTER="$(redis-cli -h $SERVICE -p $SENTINEL_PORT sentinel get-master-addr-by-name $MASTER_GROUP | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"
           if [ -n "$MASTER" ]; then
               redis_update "$MASTER"
               sentinel_update "$MASTER"
           else
              echo "Could not failover, exiting..."
              exit 1
           fi
        else
            echo "Found reachable master, updating config"
            redis_update "$MASTER"
            sentinel_update "$MASTER"
        fi
    }

    if [ -n "$MASTER" ]; then
        find_master
    else
        setup_defaults
    fi

    {{- else }}

    sentinel_update $DEFAULT_MASTER

    {{- end }}

    if [ -n "$AUTH" ]; then
        echo "Setting auth values"
        ESCAPED_AUTH=$(echo "$AUTH" | sed -e 's/[\/&]/\\&/g');
        sed -i "s/replace-default-auth/${ESCAPED_AUTH}/" "$REDIS_CONF" "$SENTINEL_CONF"
    fi

    echo "Done" > /data/store/conf/done
    echo "Ready..."
    exit 0
