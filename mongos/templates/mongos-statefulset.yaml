apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mongos.fullname" . }}
  labels:
    {{- include "mongos.labels" . | nindent 4 }}
  {{- with .Values.podAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mongos.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ include "mongos.fullname" . }}
  replicas: {{ .Values.replicas }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mongos.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/configmap-config: {{ include (print .Template.BasePath "/mongos-configmap-config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and (eq (toString .Values.metrics.enabled) "true") (.Values.metrics.prometheusDiscovery) }}
        prometheus.io/port: "{{ .Values.metrics.port }}"
        prometheus.io/scrape: "true"
        prometheus.io/path: {{ .Values.metrics.path }}
        {{- end }}
    spec:
      {{- with .Values.schedulerName }}
      schedulerName: {{ . }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl . $ | nindent 8 }}
      {{- else }}
      affinity:
        {{- include "mongos.podDefaultAffinity" . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
      {{- if .Values.initSysctl.enabled }}
      - name: init-sysctl
        image: {{ .Values.initSysctl.image.repository }}:{{ .Values.initSysctl.image.tag }}
        imagePullPolicy: {{ .Values.initSysctl.image.pullPolicy }}
        command:
          {{- toYaml .Values.initSysctl.command | nindent 10 }}
        securityContext:
          runAsNonRoot: false
          privileged: true
          runAsUser: 0
        {{- if .Values.initSysctl.mountHostSys }}
        volumeMounts:
        - name: host-sys
          mountPath: /host-sys
        {{- end }}
      {{- end }}
      - name: init-config
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - sh
        args:
        - -c
        - |
          mkdir -p /data/store/conf
          cp -f /readonly-config/mongos.conf /data/store/conf/mongos.conf
          {{- if eq (toString .Values.auth.enabled) "true" }}
          cp -f /readonly-key/key.txt /data/store/conf/key.txt
          chmod 600 /data/store/conf/key.txt
          {{- end }}
        volumeMounts:
        - name: config
          mountPath: /readonly-config
          readOnly: true
        {{- if eq (toString .Values.auth.enabled) "true" }}
        - name: key
          mountPath: /readonly-key
        {{- end }}
        - name: data
          mountPath: /data/store
        {{- with .Values.initConfig.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      containers:
      - name: mongos
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - mongos
        args:
        - --config=/data/store/conf/mongos.conf
        - --configdb={{ include "mongos.configsvr.rsAnnounce" . }}
        {{- if eq (toString .Values.auth.enabled) "true" }}
        - --keyFile=/data/store/conf/key.txt
        {{- end }}
        - --bind_ip=0.0.0.0
        - --port={{ .Values.mongos.port }}
        {{- with .Values.mongos.extraEnvs }}
        env:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
        - name: mongos
          containerPort: {{ .Values.mongos.port }}
        volumeMounts:
        - name: data
          mountPath: /data/store
        readinessProbe:
          exec:
            command: [ "mongo", "--port", "{{ .Values.mongos.port }}", "--eval", "db.adminCommand('ping')" ]
          {{- with .Values.mongos.readinessProbe }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        livenessProbe:
          exec:
            command: [ "mongo", "--port", "{{ .Values.mongos.port }}", "--eval", "db.adminCommand('ping')" ]
          {{- with .Values.mongos.livenessProbe }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- with .Values.mongos.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if eq (toString .Values.metrics.enabled) "true" }}
      - name: metrics
        image: {{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
        command:
        - sh
        args:
        - -c
        - |
          /bin/mongodb_exporter \
          {{- if eq (toString .Values.auth.enabled) "true" }}
          --mongodb.uri mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.mongos.port }} \
          {{- else }}
          --mongodb.uri mongodb://localhost:{{ .Values.mongos.port }} \
          {{- end }}
          --web.metrics-path={{ .Values.metrics.path }} \
          --web.listen-address=:{{ .Values.metrics.port }} \
          {{- with .Values.metrics.extraArgs }}
          {{- . | nindent 10 }}
          {{- end }}
        {{- if eq (toString .Values.auth.enabled) "true" }}
        env:
        - name: METRICS_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "mongos.metricsSecret" . }}
              key: user
        - name: METRICS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "mongos.metricsSecret" . }}
              key: password
        {{- end }}
        ports:
        - name: metrics
          containerPort: {{ .Values.metrics.port }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              /bin/mongodb_exporter \
              {{- if eq (toString .Values.auth.enabled) "true" }}
              --mongodb.uri mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.mongos.port }} \
              {{- else }}
              --mongodb.uri mongodb://localhost:{{ .Values.mongos.port }} \
              {{- end }}
              --test
          {{- with .Values.metrics.livenessProbe }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- with .Values.metrics.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "mongos.fullname" . }}-config
      {{- if eq (toString .Values.auth.enabled) "true" }}
      - name: key
        secret:
          secretName: {{ include "mongos.keySecret" . }}
          defaultMode: 0400
      {{- end }}
      - name: data
        emptyDir: {}
