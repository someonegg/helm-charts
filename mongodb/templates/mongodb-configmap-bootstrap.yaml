{{- if not .Values.manualMode -}}
{{- $fullName := include "mongodb.fullname" . -}}
{{- $suffixFQDN := include "mongodb.suffixFQDN" . -}}
{{- $replicas := int .Values.replicas -}}
{{- $dbport := int .Values.mongodb.port -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mongodb.fullname" . }}-bootstrap
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  bootstrap.sh: |
    #!/bin/bash
    set -x

    {{- if .Values.auth.enabled }}
    MONGOCLI=(mongo -u "$ADMIN_USER" -p "$ADMIN_PASSWORD" --quiet)
    {{- else }}
    MONGOCLI=(mongo --quiet)
    {{- end }}

    PEERS=()
    {{- range $i := until $replicas }}
    PEERS[{{ $i }}]="{{ $fullName }}-{{ $i }}.{{ $suffixFQDN }}:{{ $dbport }}"
    {{- end }}

    do_install() {
        echo "do install..."
        local master="{{ $fullName }}-0.{{ $suffixFQDN }}:{{ $dbport }}"
        local initiate_js="rs.initiate({ \
          _id: '{{ .Values.replicaSetName }}', \
          members: [
            {{- range $i := until $replicas -}}
            {{- if gt $i 0 -}} , {{- end -}}
            { _id: {{ $i }}, host: '{{ $fullName }}-{{ $i }}.{{ $suffixFQDN }}:{{ $dbport }}' }
            {{- end -}}
          ] \
        })"
        "${MONGOCLI[@]}" --host "$master" --eval "$initiate_js"
    }

    do_update() {
        echo "do update..."
        local master=$1
        local peer=""
        for peer in "${PEERS[@]}"; do
            "${MONGOCLI[@]}" admin --host "$master" --eval "rs.add('$peer')"
        done
    }

    find_master() {
        local master=""
        local peer=""
        for peer in "${PEERS[@]}"; do
            master=$("${MONGOCLI[@]}" --host "$peer" --eval "rs.isMaster().primary")
            if [[ $master =~ " " ]]; then
                continue
            fi
            if [ -n "$master" ]; then
                echo -n "$master"
                break
            fi
        done
    }

    try_once() {
        echo "try once..."

        local uninitialized=()
        local peer=""
        for peer in "${PEERS[@]}"; do
            if ("${MONGOCLI[@]}" --host "$peer" --eval "rs.status()" | grep "NotYetInitialized"); then
                uninitialized=(${uninitialized[@]} "$peer")
            fi
        done

        if [[ ${#uninitialized[@]} == ${#PEERS[@]} ]]; then
            do_install
            return
        fi

        if [[ ${#uninitialized[@]} == 0 ]]; then
            return
        fi

        local master=$(find_master)
        if [ -n "$master" ]; then
            do_update "$master"
        fi
    }

    is_completed() {
        local initialized=()
        local peer=""
        for peer in "${PEERS[@]}"; do
            if [[ $("${MONGOCLI[@]}" --host "$peer" --eval "rs.status().ok") == "1" ]]; then
                initialized=(${initialized[@]} $peer)
            fi
        done

        if [[ ${#initialized[@]} == ${#PEERS[@]} ]]; then
            return 0
        fi
        return 1
    }

    until is_completed; do
        try_once
        sleep 5
    done

    {{- if .Values.auth.enabled }}

    init_rsdb_auth() {
        local master=$(find_master)
        if [ -z "$master" ]; then
            return 1
        fi
        local output=""
        output=$( "${MONGOCLI[@]}" admin --host "$master" \
            --eval "db.createUser({user: '$RWANY_USER', pwd: '$RWANY_PASSWORD', roles: ['readWriteAnyDatabase']})" )
        if ! [[ $output =~ "Successfully added user" || $output =~ "already exists" ]]; then
            return 2
        fi
        {{- if .Values.metrics.enabled }}
        output=$( "${MONGOCLI[@]}" admin --host "$master" \
            --eval "db.createUser({user: '$METRICS_USER', pwd: '$METRICS_PASSWORD', roles: [{role: 'clusterMonitor', db: 'admin'}, {role: 'read', db: 'local'}]})" )
        if ! [[ $output =~ "Successfully added user" || $output =~ "already exists" ]]; then
            return 3
        fi
        {{- end }}
        return 0
    }
    until init_rsdb_auth; do
        sleep 5
    done
    {{- end }}

    echo "bootstrap done"
    exit 0
{{- end -}}
