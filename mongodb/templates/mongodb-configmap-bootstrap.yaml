{{- if not .Values.manualMode -}}
{{- $fullname := include "mongodb.fullname" . -}}
{{- $suffixFQDN := include "mongodb.suffixFQDN" . -}}
{{- $replicas := int .Values.replicas -}}
{{- $hiddens := int .Values.hiddens -}}
{{- $dbport := int .Values.mongodb.port -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullname }}-bootstrap
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  bootstrap.sh: |
    #!/bin/bash
    # set -x

    {{- if eq (toString .Values.auth.enabled) "true" }}
    MONGOCLI=(mongo -u "$CLUSTER_USER" -p "$CLUSTER_PASSWORD" --authenticationDatabase admin --quiet)
    {{- else }}
    MONGOCLI=(mongo --quiet)
    {{- end }}

    PEERS=()
    {{- range $i := until $replicas }}
    PEERS[{{ $i }}]="{{ $fullname }}-{{ $i }}.{{ $suffixFQDN }}:{{ $dbport }}"
    {{- end }}

    do_install() {
        echo "do install..."
        local master="{{ $fullname }}-0.{{ $suffixFQDN }}:{{ $dbport }}"
        local initiate_js="rs.initiate({ \
          _id: '{{ .Values.replSet }}', \
          members: [
            {{- range $i := until 1 -}}
            {{- if gt $i 0 -}} , {{- end -}}
            { _id: {{ $i }}, host: '{{ $fullname }}-{{ $i }}.{{ $suffixFQDN }}:{{ $dbport }}' }
            {{- end -}}
          ] \
        })"
        "${MONGOCLI[@]}" --host "$master" --eval "$initiate_js"
    }

    do_update() {
        echo "do update..."
        local master=$1
        local id=0; local peer=""
        for id in "${!PEERS[@]}"; do
            peer=${PEERS[$id]}
            "${MONGOCLI[@]}" --host "$master" --eval "rs.add({_id: $id, host: '$peer'})"
        done
    }

    find_master() {
        local master=""
        local peer=""
        for peer in "${PEERS[@]}"; do
            master=$("${MONGOCLI[@]}" --host "$peer" --eval "rs.isMaster().primary")
            if [[ $master =~ " " ]]; then
                continue
            fi
            if [ -n "$master" ]; then
                echo -n "$master"
                break
            fi
        done
    }

    try_once() {
        echo "try once..."

        local uninitialized=()
        local peer=""
        for peer in "${PEERS[@]}"; do
            if ("${MONGOCLI[@]}" --host "$peer" --eval "rs.status()" | grep "NotYetInitialized" >/dev/null); then
                uninitialized=(${uninitialized[@]} "$peer")
            fi
        done

        if [[ ${#uninitialized[@]} == ${#PEERS[@]} ]]; then
            do_install
            return
        fi

        if [[ ${#uninitialized[@]} == 0 ]]; then
            return
        fi

        local master=$(find_master)
        if [ -n "$master" ]; then
            do_update "$master"
        fi
    }

    is_completed() {
        local initialized=()
        local peer=""
        for peer in "${PEERS[@]}"; do
            if [[ $("${MONGOCLI[@]}" --host "$peer" --eval "rs.status().ok") == "1" ]]; then
                initialized=(${initialized[@]} $peer)
            fi
        done

        if [[ ${#initialized[@]} == ${#PEERS[@]} ]]; then
            return 0
        fi
        return 1
    }

    until is_completed; do
        try_once
        sleep 5
    done

    {{- if (eq "shardsvr" .Values.clusterRole) }}

    IFS=',' read -ra MONGOS_ADDR <<< "$ANNOUNCE_MONGOS"

    add_shard() {
        echo "add shard..."

        local output=""
        output=$( "${MONGOCLI[@]}" --host "${MONGOS_ADDR[0]}" \
            --eval "sh.addShard('{{ .Values.replSet }}/{{ $fullname }}-0.{{ $suffixFQDN }}:{{ $dbport }}').ok" )
        if [[ "$output" != "1" ]]; then
            return 1
        fi
        return 0
    }
    until add_shard; do
        sleep 5
    done
    {{- end }}

    {{- if ne $hiddens 0 }}

    HIDDENS=()
    {{- range $i := until $hiddens }}
    HIDDENS[{{ $i }}]="{{ $fullname }}-hidden-{{ $i }}.{{ $suffixFQDN }}:{{ $dbport }}"
    {{- end }}

    hidden_do_update() {
        echo "do update for hidden..."
        local master=$1
        local i=0; local id=0; local peer=""
        for i in "${!HIDDENS[@]}"; do
            id=$((i+100))
            peer=${HIDDENS[$i]}
            "${MONGOCLI[@]}" --host "$master" --eval \
                "rs.add({_id: $id, host: '$peer', hidden: true, votes: 0, priority: 0})"
        done
    }

    hidden_try_once() {
        echo "try once for hidden..."

        local master=$(find_master)
        if [ -n "$master" ]; then
            hidden_do_update "$master"
        fi
    }

    hidden_is_completed() {
        local initialized=()
        local peer=""
        for peer in "${HIDDENS[@]}"; do
            if [[ $("${MONGOCLI[@]}" --host "$peer" --eval "rs.status().ok") == "1" ]]; then
                initialized=(${initialized[@]} $peer)
            fi
        done

        if [[ ${#initialized[@]} == ${#HIDDENS[@]} ]]; then
            return 0
        fi
        return 1
    }

    until hidden_is_completed; do
        hidden_try_once
        sleep 5
    done
    {{- end }}

    echo "bootstrap done"
    exit 0
{{- end -}}
